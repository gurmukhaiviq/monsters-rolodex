{"version":3,"sources":["components/card/card.components.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,YAAO,SAACC,GAAD,OACpB,sBAAKC,UAAW,iBAAhB,UACA,qBAAKC,IAAM,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,mCAAML,EAAMI,QAAQE,QACpB,kCAAKN,EAAMI,QAAQG,cCHNC,G,MAAW,SAAAR,GAAK,OACxB,qBAAKC,UAAY,YAAjB,SAEMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAwBA,QAAWA,GAAvBA,EAAQC,WCHjDM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAEzB,uBAAOZ,UAAW,SAASa,KAAM,SAASF,YAAgBA,EAAcG,SAAaF,MCwCtEG,E,kDAtCb,aAAe,IAAD,8BACZ,gBAiBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAcF,EAAEG,OAAOC,SAjBvC,EAAKC,MAAQ,CAEXb,SAAW,GACXU,YAAc,IALJ,E,gEAUO,IAAD,OAClBI,MAAO,8CACNC,MAAK,SAAAC,GAAQ,OACZA,EAASC,UAGRF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAKjC,IAAD,EAC0BC,KAAKN,MAA/Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK9B,UAAU,MAAf,UACA,kDACE,cAAC,EAAD,CAAWW,YAAc,kBAAkBC,aAAgBe,KAAKf,eAEhE,cAAC,EAAD,CAAUJ,SAAWoB,W,GA/BXI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e832b6dc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = (props) => (\r\n<div className= 'card-container'>\r\n<img alt = \"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n<h2> {props.monster.name}</h2>\r\n<p> {props.monster.email}</p>\r\n</div>\r\n)\r\n    ","import React from 'react';\r\nimport { Card } from '../card/card.components'\r\nimport './card-list.styles.css';\r\nexport const CardList = props => (\r\n     <div className = 'card-list'>\r\n        {\r\n           props.monsters.map(monster => (<Card key= {monster.id} monster = {monster}/>))\r\n        }\r\n        </div>\r\n    \r\n\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n\r\n<input className= 'search' type =\"search\" placeholder = { placeholder } onChange = { handleChange }/>\r\n\r\n);","// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.components';\nimport React , { Component } from 'react';\nimport {SearchBox} from './components/search-box/search-box.components';\nclass App extends Component\n{\n  constructor() {\n    super();\n    this.state = {\n      \n      monsters : [],\n      searchField : ''\n    };\n   // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch ('https://jsonplaceholder.typicode.com/users')\n    .then(response => \n      response.json() \n      )\n      // .then(json => console.log(json))\n      .then(users => this.setState({monsters: users}));\n  };\n  handleChange = e => {\n    this.setState({ searchField : e.target.value});\n  }\n  render () {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className='App'>\n      <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder = 'search monsters' handleChange = {this.handleChange}/>\n\n        <CardList monsters ={filteredMonsters}/>\n        \n      </div>\n    );\n  }\n    \n  \n \n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}